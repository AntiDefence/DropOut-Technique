from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from keras.layers import Dense, Dropout
import matplotlib.pyplot as plt
from keras.callbacks import EarlyStopping

veri=fetch_california_housing() # we used california housing dataset from sklearn library.

x=veri.data
y=veri.target.reshape(-1,1)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)
x_train,x_val,y_train,y_val=train_test_split(x_train,y_train,test_size=0.1,random_state=0)

sc=StandardScaler()

x_train=sc.fit_transform(x_train)
x_val=sc.fit_transform(x_val)

model=Sequential()
model.add(Dense(20,input_dim=x_train.shape[1],activation="relu"))
model.add(Dropout(0.2)) #Every layer has its dropout function - some of the norons in layers were ignored.
0.2=%20 noron
model.add(Dense(10,activation="relu"))
model.add(Dropout(0.2))#Every layer has its dropout function - some of the norons in layers were ignored.
model.add(Dense(5,activation="relu"))
model.add(Dropout(0.2))#Every layer has its dropout function - some of the norons in layers were ignored.
model.add(Dense(1,activation="linear"))

model.compile(loss="mse",optimizer="adam",metrics=["mse"])
es=EarlyStopping(monitor="val_loss",patience=2,mode="min",verbose=1) #we are using loss function, bc this is a regression problem. accuracy can be used for classification problem.
m1=model.fit(x_train,y_train,validation_data=(x_val,y_val),epochs=100,verbose=0,callbacks=[es])

plt.figure(figsize=(40,25))
plt.plot(m1.history["mse"])
plt.plot(m1.history["val_mse"])
plt.title("Model MSE With DropOut")
plt.ylabel("MSE")
plt.xlabel("Epochs")
plt.legend(["Train","Validation"],loc="upper right")
plt.show

